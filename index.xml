<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MLOS</title>
    <link>https://microsoft.github.io/MLOS/</link>
    <description>Recent content on MLOS</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://microsoft.github.io/MLOS/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://microsoft.github.io/MLOS/CODE_OF_CONDUCT/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://microsoft.github.io/MLOS/CODE_OF_CONDUCT/</guid>
      <description>Microsoft Open Source Code of Conduct This project has adopted the Microsoft Open Source Code of Conduct.
Resources:
 Microsoft Open Source Code of Conduct Microsoft Code of Conduct FAQ Contact opencode@microsoft.com with questions or concerns  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://microsoft.github.io/MLOS/CONTRIBUTING/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://microsoft.github.io/MLOS/CONTRIBUTING/</guid>
      <description>Contributing to MLOS This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.opensource.microsoft.com.
When you submit a pull request, a CLA bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., status check, comment).</description>
    </item>
    
    <item>
      <title></title>
      <link>https://microsoft.github.io/MLOS/documentation/01-Prerequisites/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://microsoft.github.io/MLOS/documentation/01-Prerequisites/</guid>
      <description>Prerequisites for building and using MLOS These are one-time setup instructions that should be executed prior to following the build instructions in 02-Build/
Contents  Prerequisites for building and using MLOS  Contents Linux  Linux Requirements Clone the repository Linux Docker Install Install Linux Build Tools  Docker Build Image Manual Build Tools Install   Linux Python Install  Docker Python Install Using Conda Manual Python Install     Windows  Windows Requirements Clone the repository Windows build tools  Using a local script Build Tools Using Chocolatey Windows Build Manually   Windows Python Install  Conda Based Install for Windows Python Using Chocolatey   Windows Docker Install      MLOS currently supports 64-bit Intel/AMD platforms, though ARM64 support is under development.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://microsoft.github.io/MLOS/documentation/02-Build/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://microsoft.github.io/MLOS/documentation/02-Build/</guid>
      <description>Build Instructions for MLOS Prerequisites See 01-Prerequisites/ for initial build tools setup instructions.
There are different instructions according to the environment setup you chose.
Contents  Build Instructions for MLOS  Prerequisites Contents Docker Linux  CLI VSCode   Windows  CLI Visual Studio      Docker If you chose to use the Docker build environment and have already built or pulled a container image using the instructions in 01-Prerequisites/ you can start an interactive session using the container image as follows:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://microsoft.github.io/MLOS/documentation/03-ExampleUsage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://microsoft.github.io/MLOS/documentation/03-ExampleUsage/</guid>
      <description>Examples of using MLOS to optimize a system TODO</description>
    </item>
    
    <item>
      <title></title>
      <link>https://microsoft.github.io/MLOS/documentation/04-Test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://microsoft.github.io/MLOS/documentation/04-Test/</guid>
      <description>Test Instructions for MLOS TODO: document how to run unit tests for
 C++ C#  Python First, ensure that the necessary Python modules are installed. See 01-Prerequisites/ for details.
Linux scripts/run-python-tests.sh Windows scripts\run-python-tests.cmd </description>
    </item>
    
    <item>
      <title></title>
      <link>https://microsoft.github.io/MLOS/documentation/05-Debug/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://microsoft.github.io/MLOS/documentation/05-Debug/</guid>
      <description>TODO</description>
    </item>
    
    <item>
      <title></title>
      <link>https://microsoft.github.io/MLOS/documentation/CodingStandard/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://microsoft.github.io/MLOS/documentation/CodingStandard/</guid>
      <description>MLOS Coding Standards MLOS uses and supports multiple languages. Here we document the coding styles and standards we attempt to adhere to and the tools we use to achieve that.
C++ For C++ we mostly try to follow the Google C++ style guidelines, with a few modifications.
Currently we rely on uncrustify to help enforce these rules (plus a little bit of human review).
See build/uncrustify/README/ for additional information.
Though we attempt to make it somewhat readable, we exclude code generated by MLOS from these strict style checks.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://microsoft.github.io/MLOS/documentation/Glossary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://microsoft.github.io/MLOS/documentation/Glossary/</guid>
      <description>MLOS Terms Glossary TODO</description>
    </item>
    
    <item>
      <title></title>
      <link>https://microsoft.github.io/MLOS/documentation/MlosArchitecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://microsoft.github.io/MLOS/documentation/MlosArchitecture/</guid>
      <description>MLOS Architecture This document provides a brief overview of the MLOS architecture for supporting Machine Learning Optimized Systems.
 MLOS Architecture  High Level Description  Principles Workflows   Architecture Diagram  Main Components Shared Memory Regions Target process  Mlos.Core Shared Channel   Mlos.Agent  Mlos.NetCore Settings Registry Assemblies Grpc Server Experiment Management     Implementation Details    High Level Description At a high level, MLOS provides infrastructure to support instance-specific tuning systems software (e.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://microsoft.github.io/MLOS/documentation/RepoOrganization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://microsoft.github.io/MLOS/documentation/RepoOrganization/</guid>
      <description>Repo Organization Some notes on the directory layout organization in this repo.
 There are build files (e.g. dirs.proj for msbuild or dotnet build, or Makefiles for make) in most directories to allow easy recursive building of that subtree you happen to be in.  Note: we provide Makefile wrappers in most directories to simply help invoke cmake and the Makefiles it generates
  build/ contains configuration related to building MLOS components  For instance, .</description>
    </item>
    
    <item>
      <title></title>
      <link>https://microsoft.github.io/MLOS/notebooks/BayesianOptimization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://microsoft.github.io/MLOS/notebooks/BayesianOptimization/</guid>
      <description>Download BayesianOptimization.ipynb notebook import matplotlib.pyplot as plt import numpy as np import pandas as pd Bayesian Optimization This notebook demonstrates the basic principles of Bayesian Optimization (BO) and how to use MLOS to perform BO.
Motivation In software performance engineering, the impact different (input) parameters (e.g. buffer size, worker thread count, etc.) can have on the (output) performance of a system for a given workload (input) can be modeled as a multidimensional function - one which we don&amp;rsquo;t know the equation for apriori, but are instead trying to learn through careful sampling of the input space and experimentation (test/benchmark runs) to gather output points.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://microsoft.github.io/MLOS/notebooks/SmartCacheCppDocker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://microsoft.github.io/MLOS/notebooks/SmartCacheCppDocker/</guid>
      <description>Download SmartCacheCppDocker.ipynb notebook Objective The goal of this notebook is to guide you through the process of executing an optimization process in Mlos.
Steps  Select build configuration. Generate the secrets file. Build the docker image. Launch the docker container. Launch Mlos.Agent. Launch SmartCache.exe benchmark.  Prerequisites  Build the Mlos project. The build configuration (Debug vs. Retail) must match your choice below. Have Docker installed and available. This notebook is run with {MLOS_ROOT}\source\Mlos.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://microsoft.github.io/MLOS/notebooks/SmartCacheOptimization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://microsoft.github.io/MLOS/notebooks/SmartCacheOptimization/</guid>
      <description>Download SmartCacheOptimization.ipynb notebook Optimizing Smart Cache with Bayesian Optimization The goal of this notebook is to optimize SmartCache using Bayesian Optimization approach.
We&amp;rsquo;re using a sequential model-based optimization approach, that consists of the following loop:
 Get suggested config from optimizer, Apply suggested config to SmartCache, Execute a fixed workload, Collect the metrics from SmartCache, Register an observation with the optimizer.  # import the required classes and tools import grpc import pandas as pd from mlos.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://microsoft.github.io/MLOS/README/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://microsoft.github.io/MLOS/README/</guid>
      <description>MLOS: Machine Learning Optimized Systems MLOS: An Infrastructure for Automated Software Performance Engineering  MLOS is an ML-powered infrastructure and methodology to democratize and automate Performance Engineering. MLOS enables continuous, instance-based, robust, and trackable systems optimization.
 From the MLOS paper at DEEM 2020
Overview Problem All systems software (e.g. SqlServer, MySQL, LevelDB, OpenSSL, etc.) is full of parameter choices.
Sometimes these are encoded in the software as constants embedded in the code (e.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://microsoft.github.io/MLOS/SECURITY/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://microsoft.github.io/MLOS/SECURITY/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>